const fs = require("fs");
const path = require("path");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function findFiles(
  dir,
  extensions = [".json", ".html", ".md", ".js", ".ts", ".tsx"]
) {
  let results = [];
  const files = fs.readdirSync(dir);

  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      if (
        ![
          "node_modules",
          ".git",
          "dist",
          "build",
          path.basename(__filename),
        ].includes(file)
      ) {
        results = results.concat(findFiles(filePath, extensions));
      }
    } else {
      const ext = path.extname(file);
      if (extensions.includes(ext) || file === "README.md") {
        results.push(filePath);
      }
    }
  }

  return results;
}

function replaceInFile(filePath, projectName) {
  try {
    let content = fs.readFileSync(filePath, "utf8");
    let modified = false;

    const lowerCaseName = projectName.toLowerCase();
    if (content.includes("vite-app-template")) {
      content = content.replace(/vite-app-template/g, lowerCaseName);
      modified = true;
    }

    if (content.includes("VITE_APP_TEMPLATE")) {
      content = content.replace(/VITE_APP_TEMPLATE/g, projectName);
      modified = true;
    }

    if (modified) {
      fs.writeFileSync(filePath, content, "utf8");
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
      return true;
    }

    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return false;
  }
}

function main() {
  rl.question("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞: ", (projectName) => {
    if (!projectName.trim()) {
      console.log("‚ùå –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
      rl.close();
      return;
    }

    console.log(`\nüîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã...`);

    const currentDir = process.cwd();
    const files = findFiles(currentDir);

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

    let processedFiles = 0;
    let modifiedFiles = 0;

    for (const file of files) {
      processedFiles++;
      if (replaceInFile(file, projectName.trim())) {
        modifiedFiles++;
      }
    }

    console.log(`\n‚ú® –ì–æ—Ç–æ–≤–æ!`);
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles}`);
    console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${modifiedFiles}`);
    console.log(`üéØ –ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: ${projectName.trim()}`);

    rl.close();
  });
}

main();
