const fs = require("fs");
const path = require("path");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function findFiles(
  dir,
  extensions = [".json", ".html", ".md", ".js", ".ts", ".tsx"]
) {
  let results = [];
  const ignoreFiles = [".DS_Store", "Thumbs.db", path.basename(__filename)];
  const files = fs.readdirSync(dir);

  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      if (!["node_modules", ".git", "dist", "build"].includes(file)) {
        results = results.concat(findFiles(filePath, extensions));
      }
    } else {
      const ext = path.extname(file);
      if (extensions.includes(ext) || file === "README.md") {
        results.push(filePath);
      }
    }
  }

  return results;
}

function loadConfig() {
  try {
    const configPath = path.join(process.cwd(), "project-config.json");
    if (fs.existsSync(configPath)) {
      const configContent = fs.readFileSync(configPath, "utf8");
      return JSON.parse(configContent);
    }
    return {};
  } catch (error) {
    console.warn(`‚ö†Ô∏è Warning: Could not load config file: ${error.message}`);
    return {};
  }
}

function replaceInFile(filePath, sanitizedName, originalName, config) {
  try {
    let content = fs.readFileSync(filePath, "utf8");
    let modified = false;

    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–≤—ã–º–∏)
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –¥–ª–∏–Ω–µ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–º–µ–Ω
    const sortedConfigKeys = Object.keys(config).sort((a, b) => b.length - a.length);
    
    for (const key of sortedConfigKeys) {
      const replacementValue = config[key];
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è ["VARIABLE_NAME"] - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–∞
      const arrayPattern = `["${key}"]`;
      if (content.includes(arrayPattern)) {
        if (Array.isArray(replacementValue)) {
          content = content.replace(new RegExp(escapeRegExp(arrayPattern), 'g'), JSON.stringify(replacementValue));
          modified = true;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–º–Ω–æ–π –∑–∞–º–µ–Ω—ã
      if (content.includes(key)) {
        let valueToReplace = replacementValue;
        
        // –ï—Å–ª–∏ —ç—Ç–æ HTML –∞—Ç—Ä–∏–±—É—Ç content="" –∏ –∑–Ω–∞—á–µ–Ω–∏–µ - –º–∞—Å—Å–∏–≤, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        const htmlContentPattern = new RegExp(`content="${escapeRegExp(key)}"`, 'g');
        if (htmlContentPattern.test(content) && Array.isArray(replacementValue)) {
          valueToReplace = replacementValue.join(', ');
        }
        // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –∏ —ç—Ç–æ –ù–ï HTML –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
        else if (typeof valueToReplace === 'object' && valueToReplace !== null) {
          valueToReplace = JSON.stringify(valueToReplace);
        }
        
        content = content.replace(new RegExp(escapeRegExp(key), 'g'), valueToReplace);
        modified = true;
      }
    }

    // –ó–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    // –°–Ω–∞—á–∞–ª–∞ VITE_APP_TEMPLATE (–±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞), –ø–æ—Ç–æ–º vite-app-template
    if (content.includes("VITE_APP_TEMPLATE")) {
      content = content.replace(/VITE_APP_TEMPLATE/g, originalName.trim());
      modified = true;
    }

    if (content.includes("vite-app-template")) {
      content = content.replace(/vite-app-template/g, sanitizedName.toLowerCase());
      modified = true;
    }

    if (modified) {
      fs.writeFileSync(filePath, content, "utf8");
      console.log(`‚úÖ Updated: ${filePath}`);
      return true;
    }

    return false;
  } catch (error) {
    console.error(`‚ùå Error processing file ${filePath}:`, error.message);
    return false;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function sanitizeProjectName(projectName) {
  // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —á—Ç–æ –Ω–µ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã –Ω–∞ —Ç–∏—Ä–µ
  let sanitized = projectName.replace(/[^a-zA-Z0-9]/g, "-");
  
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–∏—Ä–µ
  sanitized = sanitized.replace(/-+/g, "-");
  
  // –£–±–∏—Ä–∞–µ–º —Ç–∏—Ä–µ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
  sanitized = sanitized.replace(/^-+|-+$/g, "");
  
  return sanitized;
}

function validateProjectName(projectName) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
  if (!projectName.trim()) {
    return { valid: false, error: "Project name cannot be empty!" };
  }
  
  // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∏–º—è
  const sanitized = sanitizeProjectName(projectName.trim());
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
  if (!sanitized) {
    return { valid: false, error: "Project name contains only invalid characters!" };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º—è –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–∏—Ä–µ
  if (sanitized === "-" || sanitized.match(/^-+$/)) {
    return { valid: false, error: "Project name cannot consist only of dashes!" };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã
  if (!sanitized.match(/^[a-zA-Z]/)) {
    return { valid: false, error: "Project name must start with a letter!" };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É (—Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞)
  if (sanitized.length < 2) {
    return { valid: false, error: "Project name must be at least 2 characters long!" };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É (–Ω–µ –±–æ–ª—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
  if (sanitized.length > 50) {
    return { valid: false, error: "Project name must be no more than 50 characters long!" };
  }
  
  return { valid: true, sanitized };
}

function main() {
  rl.question("Enter project name: ", (inputName) => {
    const validation = validateProjectName(inputName);
    
    if (!validation.valid) {
      console.log(`‚ùå ${validation.error}`);
      rl.close();
      return;
    }
    
    const sanitizedName = validation.sanitized;
    const originalName = inputName.trim();
    
    if (sanitizedName !== originalName) {
      console.log(
        `üìù Project name sanitized: "${originalName}" ‚Üí "${sanitizedName}"`
      );
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    console.log(`\nÔøΩ Loading project configuration...`);
    const config = loadConfig();
    const configKeys = Object.keys(config);
    
    if (configKeys.length > 0) {
      console.log(`üìã Found ${configKeys.length} config variables: ${configKeys.join(', ')}`);
    } else {
      console.log(`üìã No config file found or config is empty`);
    }

    console.log(`\nÔøΩüîç Searching for files to replace in Sources folder...`);

    const currentDir = process.cwd();
    const sourcesDir = path.join(currentDir, "Sources");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ Sources —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(sourcesDir)) {
      console.log("‚ùå Sources folder not found!");
      rl.close();
      return;
    }
    
    const files = findFiles(sourcesDir);

    console.log(`üìÅ Found ${files.length} files to check`);

    let processedFiles = 0;
    let modifiedFiles = 0;

    for (const file of files) {
      processedFiles++;
      if (replaceInFile(file, sanitizedName, originalName, config)) {
        modifiedFiles++;
      }
    }

    console.log(`\n‚ú® Done!`);
    console.log(`üìä Files processed: ${processedFiles}`);
    console.log(`üîÑ Files modified: ${modifiedFiles}`);
    console.log(`üéØ vite-app-template ‚Üí ${sanitizedName.toLowerCase()}`);
    console.log(`üéØ VITE_APP_TEMPLATE ‚Üí ${originalName}`);
    
    if (configKeys.length > 0) {
      console.log(`üéØ Config variables replaced: ${configKeys.length}`);
    }

    rl.close();
  });
}

main();
